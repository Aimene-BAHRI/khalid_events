// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  role      UserRole @default(STAFF)
  language  Language @default(AR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]
  payments Payment[]
}

enum UserRole {
  ADMIN
  STAFF
}

enum Language {
  AR
  EN
}

model Client {
  id          String   @id @default(cuid())
  fullName    String
  email       String?  @unique
  phoneNumber String
  guestCount  Int?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings Booking[]
  payments Payment[]
}

model Booking {
  id         String        @id @default(cuid())
  title      String?
  client     Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId   String
  date       DateTime
  timeSlot   TimeSlot
  status     BookingStatus @default(INQUIRY)
  totalPrice Float
  paidAmount Float         @default(0)
  notes      String?
  expiresAt  DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  payments Payment[]
}

enum TimeSlot {
  MORNING
  EVENING
}

enum BookingStatus {
  INQUIRY
  RESERVED
  DEPOSIT_PAID
  CONFIRMED
  FULLY_PAID
  CANCELLED
}

model Payment {
  id        String        @id @default(cuid())
  booking   Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId String
  staff     User          @relation(fields: [staffId], references: [id])
  staffId   String
  amount    Float
  method    PaymentMethod @default(CASH)
  type      PaymentType
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Client    Client?       @relation(fields: [clientId], references: [id])
  clientId  String?
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  CHECK
}

enum PaymentType {
  DEPOSIT
  PARTIAL
  FULL
}

model PricingSeason {
  id           String   @id @default(cuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  morningPrice Float
  eveningPrice Float
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
