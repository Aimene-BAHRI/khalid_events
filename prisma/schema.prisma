generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  role      UserRole @default(STAFF)
  language  Language @default(AR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  bookings Booking[]
  payments Payment[]
}

enum UserRole {
  ADMIN
  STAFF
}

enum Language {
  AR
  EN
}

model Client {
  id          String   @id @default(cuid())
  fullName    String
  email       String?  @unique
  phoneNumber String
  guestCount  Int? // general info about client, but can vary per booking
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  bookings Booking[]
  payments Payment[]

  @@unique([phoneNumber]) // prevent duplicate clients by phone
}

model Booking {
  id         String        @id @default(cuid())
  title      String?
  client     Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId   String
  date       DateTime
  timeSlot   TimeSlot
  status     BookingStatus @default(INQUIRY)
  totalPrice Float
  paidAmount Float         @default(0)
  guestCount Int?          // moved here for per-booking accuracy
  discount   Float?        // promotions or negotiated adjustments
  notes      String?
  expiresAt  DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  deletedAt  DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  payments Payment[]

  @@index([date, timeSlot])              // fast lookups
  @@unique([date, timeSlot])             // prevent double-booking globally
  @@unique([clientId, date, timeSlot])   // prevent same client booking same slot twice
}

enum TimeSlot {
  MORNING
  EVENING
}

enum BookingStatus {
  INQUIRY
  RESERVED
  DEPOSIT_PAID
  CONFIRMED
  FULLY_PAID
  CANCELLED
}

model Payment {
  id        String   @id @default(cuid())
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId String
  staff     User     @relation(fields: [staffId], references: [id])
  staffId   String
  amount    Float
  type      PaymentType
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  Client    Client?  @relation(fields: [clientId], references: [id])
  clientId  String?
}

enum PaymentType {
  DEPOSIT
  PARTIAL
  FULL
}

model PricingSeason {
  id           String   @id @default(cuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  morningPrice Float
  eveningPrice Float
  priority     Int      @default(1)   // resolve overlaps
  daysOfWeek   WeekDay[]              // allow weekday/weekend pricing
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
